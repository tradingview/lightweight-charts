# https://circleci.com/docs/2.0/configuration-reference

version: 2.1

parameters:
  run_branch_specific_graphics_tests:
    type: boolean
    default: false

aliases:
  - &restore-node-modules-cache
      name: Restore node_modules cache
      keys:
        - &cache-key v1-dependencies-{{ checksum "package.json" }}

  - &save-node-modules-cache
      name: Save node_modules cache
      paths:
        - node_modules
      key: *cache-key

  - &restore-node-modules-cache-website
      name: Restore node_modules cache for /website
      keys:
        - &cache-key-website v1-dependencies-website-{{ checksum "website/package.json" }}

  - &save-node-modules-cache-website
      name: Save node_modules cache for /website
      paths:
        - website/node_modules
      key: *cache-key-website

  - &default-filters
      tags:
        ignore:
          - /.*/

  - &merge-based-filters
      <<: *default-filters
      branches:
        ignore:
          - master
          - /release\/.*/


executors:
  node-executor:
    docker:
      - image: cimg/node:22.3

  node-browsers-executor:
    docker:
      - image: cimg/node:22.3-browsers

commands:
  checkout-with-deps:
    description: "Checkout the code with restore npm dependencies"
    steps:
      - checkout
      - restore_cache: *restore-node-modules-cache
      - restore_cache: *restore-node-modules-cache-website

  run-graphics-tests:
    description: "Run graphics tests with specific devicePixelRatio"
    parameters:
      devicePixelRatio:
        type: string
      productionBuild:
        type: boolean
        default: false
      grep:
        type: string
      branchSpecificTest:
        type: boolean
        default: false
    steps:
      - checkout-with-deps
      - run:
          name: "Setup Environment Variables"
          command: |
            echo 'export NO_SANDBOX="true"' >> $BASH_ENV
            echo 'export CMP_OUT_DIR="./graphics-cmp-data"' >> $BASH_ENV
            echo 'export TESTS_REPORT_FILE="test-results/graphics/results.xml"' >> $BASH_ENV
            echo 'export DEVICE_PIXEL_RATIO=<< parameters.devicePixelRatio >>' >> $BASH_ENV
            echo 'export PRODUCTION_BUILD=<< parameters.productionBuild >>' >> $BASH_ENV
            echo 'export GREP="<< parameters.grep >>"' >> $BASH_ENV
            echo 'export COMPARE_BRANCH="master"' >> $BASH_ENV
            echo 'export BRANCH_SPECIFIC_TEST=<< parameters.branchSpecificTest >>' >> $BASH_ENV
      - run:
          command: scripts/run-graphics-tests.sh
          no_output_timeout: 20m

      - store_test_results:
          path: test-results/
      - store_artifacts:
          path: ./graphics-cmp-data
          when: on_fail


jobs:
  install-deps:
    executor: node-executor
    steps:
      - checkout-with-deps
      - run: npm install
      - run: npx puppeteer browsers install chrome
      - save_cache: *save-node-modules-cache

  install-deps-website:
    executor: node-executor
    steps:
      - checkout-with-deps
      - run: cd website && npm install
      - save_cache: *save-node-modules-cache-website

  build:
    executor: node-executor
    steps:
      - checkout-with-deps
      - run: npm run build:prod
      # make sure that the project is compiled successfully with composite projects
      # so we don't have cyclic deps between projects and wrong imports
      - run: npm run tsc-verify
      - persist_to_workspace:
          root: ./
          paths:
            - lib
            - dist

  no-crlf:
    executor: node-executor
    steps:
      - checkout
      - run: scripts/no-crlf.sh

  trailing-lf:
    executor: node-executor
    steps:
      - checkout
      - run: scripts/trailing-newlines.sh

  lint-eslint:
    executor: node-executor
    steps:
      - checkout-with-deps
      - attach_workspace:
          at: ./
      - run: npm run lint:eslint

  lint-dts:
    executor: node-executor
    steps:
      - checkout-with-deps
      - attach_workspace:
          at: ./
      - run: npm run bundle-dts
      - run: npm run check-dts-docs

  lint-markdown:
    executor: node-executor
    steps:
      - checkout-with-deps
      - run: npm run lint:md

  usable-in-nodejs:
    executor: node-executor
    steps:
      - checkout-with-deps
      - attach_workspace:
          at: ./
      - run: npm run prepare-package-json-for-release
      - run:
          name: "Installing lightweight-charts package into node_modules"
          # this is hacky way to do something like `npm link lightweight-charts`
          # but we cannot use `npm link` in CI
          command: |
            cd node_modules
            ln -s ../ lightweight-charts
      - run:
          name: "Check ESM could be imported in NodeJS"
          command: node -e "import 'lightweight-charts'" --input-type=module

  unittests:
    executor: node-executor
    environment:
      TESTS_REPORT_FILE: "test-results/unittests/results.xml"
    steps:
      - checkout-with-deps
      - run: npm run test
      - store_test_results:
          path: test-results/

  type-tests:
    executor: node-executor
    steps:
      - checkout-with-deps
      - run: npm run type-tests

  dts-changes:
    executor: node-executor
    steps:
      - checkout-with-deps
      - run: scripts/check-dts-changes.sh ./dts-changes $(git merge-base origin/master HEAD) $(git rev-parse HEAD)
      - store_artifacts:
          path: ./dts-changes
          when: on_fail

  graphics-tests:
    parameters:
      grep:
        type: string
      dpr:
        type: string
      productionBuild:
        type: boolean
        default: false
      branchSpecificTest:
        type: boolean
        default: false
    executor: node-browsers-executor
    steps:
      - run-graphics-tests:
          devicePixelRatio: << parameters.dpr >>
          grep: << parameters.grep >>
          productionBuild: << parameters.productionBuild >>
          branchSpecificTest: << parameters.branchSpecificTest >>

  memleaks-tests:
    executor: node-browsers-executor
    environment:
      NO_SANDBOX: "true"
      TESTS_REPORT_FILE: "test-results/memleaks/results.xml"
      RUNNING_ON_CI: "true"
    steps:
      - checkout-with-deps
      - attach_workspace:
          at: ./
      # install the required libraries for chrome version used by memlab
      - run: sudo apt-get update
      - run: sudo apt-get install ca-certificates fonts-liberation libasound2 libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 lsb-release wget xdg-utils
      - run: sleep 5
      - run: scripts/run-memleaks-tests.sh
      - store_test_results:
          path: test-results/
      - store_artifacts:
          path: tests/e2e/memleaks/.logs/

  coverage:
    executor: node-browsers-executor
    environment:
      NO_SANDBOX: "true"
      TESTS_REPORT_FILE: "test-results/coverage/results.xml"
    steps:
      - checkout-with-deps
      - attach_workspace:
          at: ./
      - run: scripts/run-coverage-tests.sh
      - store_test_results:
          path: test-results/

  interactions:
    executor: node-browsers-executor
    environment:
      NO_SANDBOX: "true"
      TESTS_REPORT_FILE: "test-results/interactions/results.xml"
    steps:
      - checkout-with-deps
      - attach_workspace:
          at: ./
      - run: scripts/run-interactions-tests.sh
      - store_test_results:
          path: test-results/

  size-limit:
    executor: node-executor
    steps:
      - checkout-with-deps
      - attach_workspace:
          at: ./
      - run:
          command: echo 'export COMPARE_BRANCH="master"' >> $BASH_ENV
      - run:
          name: "Comparing sizes with merge-base"
          command: node scripts/compare-size-with-merge-base.js
      - run: npm run size-limit

  build-docusaurus-website:
    executor: node-executor
    resource_class: medium+
    steps:
      - checkout-with-deps
      - run: npm run build:prod
      - run:
          name: "Install dependencies and build website"
          command: |
            cd website
            npm install
            npm run build
      - run:
          # we need to run this check here because only here we have generated md files of the website
          name: "Check website markdown links"
          command: npm run check-markdown-links -- --check-website-links
      - persist_to_workspace:
          root: ./
          paths:
            - website


anchors:
  - &graphics-test-matrix
    parameters:
      dpr: ["1.0", "1.25", "1.5", "2.0"]
      productionBuild: [false, true]
    exclude:
      - dpr: "1.0"
        productionBuild: true
      - dpr: "1.25"
        productionBuild: true
      - dpr: "1.5"
        productionBuild: true

  - &graphics-test-config
    requires:
      - build
    filters: *merge-based-filters
    dpr: << matrix.dpr >>
    productionBuild: << matrix.productionBuild >>


workflows:
  version: 2

  branch-specific-graphics-tests:
    when: << pipeline.parameters.run_branch_specific_graphics_tests >>
    jobs:
      - install-deps:
          filters: *default-filters
      - install-deps-website:
          filters: *default-filters
      - build:
          filters: *default-filters
          requires:
            - install-deps
            - install-deps-website

      - graphics-tests:
          name: branch_specific_graphics-tests-part1-dpr<< matrix.dpr >><<# matrix.productionBuild >>-PROD<</ matrix.productionBuild >>
          grep: "(api/|applying-options/|series-markers/|price-scale/)"
          branchSpecificTest: true
          matrix: *graphics-test-matrix
          <<: *graphics-test-config
      - graphics-tests:
          name: branch_specific_graphics-tests-part2-dpr<< matrix.dpr >><<# matrix.productionBuild >>-PROD<</ matrix.productionBuild >>
          grep: "(initial-options/|logical-range/|panes/|plugins/|two-scales/|test-cases/)"
          branchSpecificTest: true
          matrix: *graphics-test-matrix
          <<: *graphics-test-config
      - graphics-tests:
          name: branch_specific_graphics-tests-part3-dpr<< matrix.dpr >><<# matrix.productionBuild >>-PROD<</ matrix.productionBuild >>
          grep: "(series/|time-scale/|degenerative-horizontal-series-with-integer-min-tick/)"
          branchSpecificTest: true
          matrix: *graphics-test-matrix
          <<: *graphics-test-config

  build-lint-test:
    when:
      not: << pipeline.parameters.run_branch_specific_graphics_tests >>
    jobs:
      - install-deps:
          filters: *default-filters
      - install-deps-website:
          filters: *default-filters
      - no-crlf:
          filters: *default-filters
      - trailing-lf:
          filters: *default-filters

      - build:
          filters: *default-filters
          requires:
            - install-deps
            - install-deps-website
      - lint-markdown:
          filters: *default-filters
          requires:
            - install-deps

      - size-limit:
          filters: *default-filters
          requires:
            - build
      - usable-in-nodejs:
          filters: *default-filters
          requires:
            - build
      - unittests:
          filters: *default-filters
          requires:
            - build
      - type-tests:
          filters: *default-filters
          requires:
            - build
      - dts-changes:
          filters: *merge-based-filters
          requires:
            - build
      - graphics-tests:
          name: graphics-tests-part1-dpr<< matrix.dpr >><<# matrix.productionBuild >>-PROD<</ matrix.productionBuild >>
          grep: "(api/|applying-options/|series-markers/|price-scale/)"
          matrix: *graphics-test-matrix
          <<: *graphics-test-config
      - graphics-tests:
          name: graphics-tests-part2-dpr<< matrix.dpr >><<# matrix.productionBuild >>-PROD<</ matrix.productionBuild >>
          grep: "(initial-options/|logical-range/|panes/|plugins/|two-scales/|test-cases/)"
          matrix: *graphics-test-matrix
          <<: *graphics-test-config
      - graphics-tests:
          name: graphics-tests-part3-dpr<< matrix.dpr >><<# matrix.productionBuild >>-PROD<</ matrix.productionBuild >>
          grep: "(series/|time-scale/|degenerative-horizontal-series-with-integer-min-tick/)"
          matrix: *graphics-test-matrix
          <<: *graphics-test-config
      - memleaks-tests:
          filters: *default-filters
          requires:
            - build
      - coverage:
          filters: *default-filters
          requires:
            - build
      - interactions:
          filters: *default-filters
          requires:
            - build
      - lint-dts:
          filters: *default-filters
          requires:
            - build
      - lint-eslint:
          filters: *default-filters
          requires:
            - build
      - build-docusaurus-website:
          filters: *default-filters
          requires:
            - install-deps
            - install-deps-website
